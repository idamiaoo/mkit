package http

import (
	"context"
	"errors"
	"fmt"
	"net"
	"net/http"
	"time"

    "github.com/pescaria/pkg/iputil"
    pb "{{.ModPrefix}}{{.Name}}/api"
	"{{.ModPrefix}}{{.Name}}/configs"
	"{{.ModPrefix}}{{.Name}}/internal/service"

	"github.com/gin-gonic/gin"
	"github.com/go-kratos/kratos/pkg/ecode"
	jsoniter "github.com/json-iterator/go"
	log "github.com/sirupsen/logrus"
)

var json = jsoniter.ConfigCompatibleWithStandardLibrary

type jsonBody struct {
	Code    int         `json:"code" form:"code"`
	Message string      `json:"message" form:"message"`
	Detail  string      `json:"detail" form:"detail"`
	Data    interface{} `json:"data,omitempty" form:"data"`
}

func (j *jsonBody) String() string {
	v, _ := json.MarshalToString(j)
	return v
}

func response(c *gin.Context, data interface{}, err error) {
	code := http.StatusOK
	bCode := ecode.Cause(err)

	if data == nil {
		data = make(map[string]interface{})
	}

	body := &jsonBody{
		Code:    bCode.Code(),
		Message: bCode.Message(),
		Data:    data,
	}

	if bCode.Code() == ecode.ServerErr.Code() {
		body.Message = err.Error()
	}
	c.Set(responseBodyKey, body.String())
	c.JSON(code, body)
}

type httpServer struct {
	c   *configs.Config
	svc *service.Service
}

var hs *httpServer

// New new a bm server.
func New(s *service.Service, c *configs.Config) (server *http.Server, cf func(), err error) {
	hs := &httpServer{
		c:   c,
		svc: s,
	}

	engine := gin.New()

	hs.initRouter(engine)

	l, err := net.Listen("tcp", c.HTTP.Addr)
	if err != nil {
		return nil, nil, err
	}

	server = &http.Server{
		ReadTimeout:  c.HTTP.ReadTimeout,
		WriteTimeout: c.HTTP.WriteTimeout,
		Handler:      engine,
	}
	go func() {
		if err := server.Serve(l); err != nil {
			if errors.Is(err, http.ErrServerClosed) {
				return
			}
			panic(err)
		}
	}()
	cf = func() {
		ctx, cancel := context.WithTimeout(context.Background(), 35*time.Second)
		if err := server.Shutdown(ctx); err != nil {
			log.Errorf("httpSrv.Shutdown error(%v)", err)
		}
		cancel()
	}

	// 获取内网 IP 地址
    host := iputil.GetLocalIP()
    port := l.Addr().(*net.TCPAddr).Port
    if host == "" {
    	err = fmt.Errorf("获取内网IP失败")
    	log.WithError(err).Error("http服务初始化失败")
    	return
    }

	log.WithFields(log.Fields{
    	"service":   fmt.Sprintf("%s", pb.AppID),
    	"listen_at": fmt.Sprintf("%s:%d", host, port),
    }).Info("http服务启动成功")
	return
}
