package service

import (
	"context"
	"fmt"

	pb "{{.ModPrefix}}{{.Name}}/api"
	"{{.ModPrefix}}{{.Name}}/configs"
	"{{.ModPrefix}}{{.Name}}/internal/dao"

	empty "github.com/golang/protobuf/ptypes/empty"
	"github.com/google/wire"
	jsoniter "github.com/json-iterator/go"
)

var json = jsoniter.ConfigCompatibleWithStandardLibrary

// Provider .
var Provider = wire.NewSet(New, wire.Bind(new(pb.{{GoName .Name}}Server), new(*Service)))

// Service service.
type Service struct {
	c      *configs.Config
	dao    *dao.Dao
}

var _ pb.{{GoName .Name}}Server = &Service{}

// New new a service and return.
func New(c *configs.Config, dao *dao.Dao) (s *Service, cf func(), err error) {
	s = &Service{
		c:      c,
		dao:    dao,
	}

	cf = func() {
		s.Close()
	}
	return
}

// SayHello grpc demo func.
func (s *Service) SayHello(ctx context.Context, request *pb.HelloRequest) (response *pb.HelloResponse, err error) {
	response = new(pb.HelloResponse)
	fmt.Printf("hello %s", request.Name)
	return
}

// Ping ping the resource.
func (s *Service) Ping(ctx context.Context, e *empty.Empty) (*empty.Empty, error) {
	return &empty.Empty{}, s.dao.Ping(ctx)
}

// Close close the resource.
func (s *Service) Close() {
}
